// <auto-generated />
using System;
using Korisnik.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Korisnik.Migrations
{
    [DbContext(typeof(KorisnikDbContext))]
    [Migration("20210316131909_4Korisnika")]
    partial class _4Korisnika
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Korisnik.Models.Izazovi", b =>
                {
                    b.Property<int>("IdIzazova")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("IdIzazavanog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdIzazivaoca")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImeIzazivaoca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImeIzazvanog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VremePoslatogIzazova")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZakazanDatum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZakazanoVreme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdIzazova");

                    b.HasIndex("IdIzazivaoca");

                    b.ToTable("Izazovi");
                });

            modelBuilder.Entity("Korisnik.Models.Korisnici", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebe82e4b-c32a-45f0-957d-99c92d0a203e",
                            Email = "Admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDwEnCTgHwyB0xfvKcsLt+2B4MfFaZIzd8axk3ohrBni3Av+WtTrlKXuHAU6ZOAySA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1d667ca-c6c5-4d71-8b79-c547374ab59e",
                            TwoFactorEnabled = false,
                            UserName = "Admin@admin.com"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0c763c9-7c8c-416f-8d40-1762d7b81f43",
                            Email = "korisnik1@korisnik1.com",
                            EmailConfirmed = true,
                            Ime = "Korisnik1",
                            LockoutEnabled = true,
                            NormalizedEmail = "KORISNIK1@KORISNIK1.COM",
                            NormalizedUserName = "KORISNIK1@KORISNIK1.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGI+fUjW41tuu3rXmUiCKt7kv9HOzXh8+vm7qYMtRcqiF8km1VoLDRHtNqkL2meoeg==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Korisnik1",
                            SecurityStamp = "ee5aa074-4328-42a3-b5ee-36503a3bea88",
                            TwoFactorEnabled = false,
                            UserName = "korisnik1@korisnik1.com"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b79483e-6426-42b1-9be3-3e9cf3622a3c",
                            Email = "korisnik2@korisnik2.com",
                            EmailConfirmed = true,
                            Ime = "Korisnik2",
                            LockoutEnabled = true,
                            NormalizedEmail = "KORISNIK2@KORISNIK2.COM",
                            NormalizedUserName = "KORISNIK2@KORISNIK2.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECy8KoEPGY3eNNu/ykPnfdO+sOTnIHXNCF+m3Pz/Ys62v+0GBZiJX8G+I1xluoFrCg==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Korisnik2",
                            SecurityStamp = "30069b08-d5d2-44dc-ba0a-24c62ddcda6c",
                            TwoFactorEnabled = false,
                            UserName = "korisnik2@korisnik2.com"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5c8eba6-1c43-41af-9b01-df708d74def9",
                            Email = "korisnik3@korisnik3.com",
                            EmailConfirmed = true,
                            Ime = "Korisnik3",
                            LockoutEnabled = true,
                            NormalizedEmail = "KORISNIK3@KORISNIK3.COM",
                            NormalizedUserName = "KORISNIK3@KORISNIK3.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEyijIhgFTONQsDYGsgq9qSWC/oLCW7nBRFZzk4Iu2d52iGU3tmgdLxiRbvMzrnttg==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Korisnik3",
                            SecurityStamp = "407c46fc-4d59-4e24-9552-6b6be3533774",
                            TwoFactorEnabled = false,
                            UserName = "korisnik3@korisnik3.com"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db90ce67-c955-48e3-8f94-f235a94551ad",
                            Email = "korisnik4@korisnik4.com",
                            EmailConfirmed = true,
                            Ime = "Korisnik4",
                            LockoutEnabled = true,
                            NormalizedEmail = "KORISNIK4@KORISNIK4.COM",
                            NormalizedUserName = "KORISNIK4@KORISNIK4.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIgaOWuT1pr+3olwNTkkm5BH8XVbI9NUlNogLTix0BV+dATiR9UR2SWv/0EFY8OZSw==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Korisnik4",
                            SecurityStamp = "5cbe812f-8223-4d52-9239-338209fa3936",
                            TwoFactorEnabled = false,
                            UserName = "korisnik4@korisnik4.com"
                        });
                });

            modelBuilder.Entity("Korisnik.Models.Ogranicenja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("IdKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSaKojimOgranicavamKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdKorisnika");

                    b.ToTable("Ogranicenja");
                });

            modelBuilder.Entity("Korisnik.Models.Prihvaceni_Izazovi", b =>
                {
                    b.Property<int>("IdIzazova")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("IdIzazavanog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdIzazivaoca")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImeIzazivaoca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImeIzazvanog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VremePoslatogIzazova")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZakazanDatum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZakazanoVreme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdIzazova");

                    b.HasIndex("IdIzazivaoca");

                    b.ToTable("Prihvaceni_Izazovi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Korisnik.Models.Izazovi", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IdIzazivaoca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Korisnik.Models.Ogranicenja", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IdKorisnika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Korisnik.Models.Prihvaceni_Izazovi", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IdIzazivaoca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Korisnik.Models.Korisnici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Korisnik.Models.Korisnici", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
