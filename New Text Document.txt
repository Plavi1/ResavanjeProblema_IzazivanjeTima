using Korisnik.Areas.Identity.Data;
using Korisnik.Models;
using Korisnik.Repositorys.IzazoviRepo;
using Korisnik.ViewModel;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Controllers
{
    public class KorisnikController : Controller
    {
        private readonly UserManager<ApplicationKorisnik> userManager;
        private readonly IKorisnikRepository korisnikRepository;
        private readonly IIzazoviRepository izazoviRepository;

        public KorisnikController(UserManager<ApplicationKorisnik> userManager, 
                                  IKorisnikRepository korisnikRepository, 
                                  IIzazoviRepository izazoviRepository)
                                
        {

            this.userManager = userManager;
            this.korisnikRepository = korisnikRepository;
            this.izazoviRepository = izazoviRepository;
        }
        
   
        [HttpGet]
        [Authorize]
        public ViewResult ListaKorisnika()
        {
            ListaKorisnikaViewModel mymodel = new ListaKorisnikaViewModel();
            var ruser = userManager.GetUserId(HttpContext.User);
            var lista = korisnikRepository.SviKorisnici().Where(e=> e.Id != ruser);
            mymodel.ApplicationKorisnik = lista;
            
            return View(mymodel) ;
        }
        [HttpPost]
        [Authorize]
        public IActionResult ListaKorisnika(ListaKorisnikaViewModel model)
        {
            if (ModelState.IsValid)
            {
                Izazovi novIzazov = new Izazovi()
                {
                    IdIzazavanog = model.IdIzazvanog,
                    IdIzazicaoca = userManager.GetUserId(HttpContext.User),
                };
                izazoviRepository.AddIzazovi(novIzazov);
                return RedirectToAction("Home");
            }

            return View();
        }





    }
}
------------------------------------------------------------------------------------------------------
model/ izazovi.cs
----------------------------------------------
using Korisnik.Areas.Identity.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Models
{
    public class Izazovi
    {
        [Key]
  
        public int IdIzazova { get; set; }
        [Required]       
     
        public string IdIzazivaoca { get; set; }       
        [Required]
 
        public string IdIzazavanog { get; set; }
         





    }
}
---------------------------------------------------------------------------------
Repositorys -KorisniciRepo
            -IzazoviRepo
-------------------------------
IIzazoviRepository

using Korisnik.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Repositorys.IzazoviRepo
{
    public interface IIzazoviRepository
    {
        IEnumerable<Izazovi> SviIzazovi();
        Izazovi GetIzazovi(int id);
        Izazovi AddIzazovi(Izazovi izazovi);
        Izazovi UpdateIzazovi(Izazovi izazovPromena);
        Izazovi Delete(int id);
    }
}
-----------------------------------------------
SQLIzazoviRepository

using Korisnik.Data;
using Korisnik.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Repositorys.IzazoviRepo
{
    public class SQLIzazoviRepository : IIzazoviRepository
    {
        private readonly KorisnikDbContext context;

        public SQLIzazoviRepository(KorisnikDbContext context)
        {
            this.context = context;
        }

        public Izazovi AddIzazovi(Izazovi izazovi)
        {
            if (izazovi.IdIzazova == 0)
            {
                izazovi.IdIzazova = 1;
            }
            else
            {
                izazovi.IdIzazova = context.Izazovi.Max(e => e.IdIzazova) + 1;
            }
            context.Izazovi.Add(izazovi);
            context.SaveChanges();
            return izazovi;
        }

        public Izazovi Delete(int id)
        {
            Izazovi izazov = context.Izazovi.Find(id);
            if(izazov != null)
            {
                context.Izazovi.Remove(izazov);
                context.SaveChanges();
            }
            return izazov;

        }

        public Izazovi GetIzazovi(int id)
        {
            return context.Izazovi.Find(id);
        }

        public IEnumerable<Izazovi> SviIzazovi()
        {
            return context.Izazovi;
        }

        public Izazovi UpdateIzazovi(Izazovi izazovPromena)
        {
           var izazov = context.Izazovi.Attach(izazovPromena);
            izazov.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            context.SaveChanges();
            return izazovPromena;

        }
    }
}
------------------------------------------------------------------------
ViewModel - ListaKorisnikaViewModel
--------------------------------------------------------------------------
using Korisnik.Areas.Identity.Data;
using Korisnik.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.ViewModel
{
    public class ListaKorisnikaViewModel
    {       
        public IEnumerable<ApplicationKorisnik> ApplicationKorisnik { get; set; }
        public string IdIzazvanog { get; set; }
        public bool IsChecked { get; set; }
    }
}
----------------------------------------------------------------------------
ListaKorisnika.cshtml
----------------------------------------------------------
@using Korisnik.ViewModel
@model ListaKorisnikaViewModel

@{ ViewData["Title"] = "ListaKorisnika";
    Layout = "~/Views/Shared/_Layout.cshtml"; }
@{ int i = 1; }
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<h1>Lista  Korisnika</h1>


@if (Model.ApplicationKorisnik.Any())

{<form method="post">
        <table class="table table-dark">

            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Ime</th>
                    <th scope="col">Prezime</th>
                    <th scope="col">Stikliraj</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var list in Model.ApplicationKorisnik)
                {
<tr>
    <td>@Convert.ToString(i++)</td>
    <td>@list.Ime</td>
    <td>@list.Prezime</td>

    <td>
        <div class="form-group">
            <div class="checkbox">
                <input asp-for="IsChecked" />
                <input hidden asp-for="IdIzazvanog" value="@list.Id" />
            </div>
        </div>
    </td>

</tr>
}

            </tbody>

        </table>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Posalji</button>
        </div>
    <div asp-validation-summary="All"></div>
    </form> }
                else
                {
    <h2>NEMA REGISTROVANIH KORISNIKA</h2>}
@section Scripts{
    <script>
        $("input:checkbox").on('click', function () {
            var $box = $(this);
            if ($box.is(":checked")) {
                var group = "input:checkbox[name='" + $box.attr("name") + "']";
                $(group).prop("checked", false);
                $box.prop("checked", true);
            } else {
                $box.prop("checked", false);
            }
        });
    </script>
}
--------------------------------------------------------------
startup.cs
services.AddScoped<IIzazoviRepository, SQLIzazoviRepository>();  
services.AddScoped<IKorisnikRepository, SQLKorisnikRepository>();

-----------------------------------------------------------------------------------
IKorisnikRepository

using Korisnik.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Models
{
    public interface IKorisnikRepository
    {
        IEnumerable<ApplicationKorisnik> SviKorisnici();

      

        

           
    }
}

------------------------------------------------------------------
SQLKorisnikRepository


using Korisnik.Areas.Identity.Data;
using Korisnik.Data;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Korisnik.Models
{
    public class SQLKorisnikRepository : IKorisnikRepository
    {
        private readonly KorisnikDbContext context;
        private readonly UserManager<ApplicationKorisnik> userManager;
        

        public SQLKorisnikRepository(KorisnikDbContext context, UserManager<ApplicationKorisnik> userManager)
                                     
        {
           
            this.context = context;
            this.userManager = userManager;
        }


        public IEnumerable<ApplicationKorisnik> SviKorisnici()
        {

            return context.Users;
        }
    }
}

-----------------------------------------------------------------
 public DbSet<Izazovi> Izazovi { get; set; }